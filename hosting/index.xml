<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hosting your own instance on CDS - Continuous Delivery Service</title>
    <link>/hosting/</link>
    <description>Recent content in Hosting your own instance on CDS - Continuous Delivery Service</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="/hosting/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Requirements</title>
      <link>/hosting/requirements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hosting/requirements/</guid>
      <description>CDS API is the core component of CDS. To start CDS API, the only mandatory dependencies are a PostgreSQL database, a Redis server and a path to the directory containing other CDS binaries.
There is are two ways to set up CDS:
 as toml configuration over environment variables.  CDS API Third-parties At the minimum, CDS needs a PostgreSQL database &amp;gt;= 9.6 (version 14.0 recommanded) and Redis &amp;gt;= 3.2. But for serious usage your may need:</description>
    </item>
    
    <item>
      <title>Understand the CDS µServices</title>
      <link>/hosting/cds_services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hosting/cds_services/</guid>
      <description>CDS is composed of two binaries: engine and worker, you can find them on CDS Releases for your os/architecture.
 worker is the binary used to run a CDS Job. engine is the binary used to run all CDS µServices.  CDS µServices A CDS µService is a process that can be launch by the engine binary.
 api: this is the main µService.  Each api must shared the same PostgreSQL and redis databases.</description>
    </item>
    
    <item>
      <title>Download</title>
      <link>/hosting/download/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hosting/download/</guid>
      <description>You&amp;rsquo;ll find the latest release of CDS on GitHub Releases
CDSCTL cdsctl Documentation
   OS 386 amd64 arm arm64 ppc64le     darwin        freebsd        linux        openbsd        windows         CDS Engine CDS Engine Documentation</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>/hosting/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hosting/configuration/</guid>
      <description>The toml configuration can be provided by a file, via consul k/v store or via vault.
Start CDS with local configuration file You can also generate a configuration file template with the following command.
$ $PATH_TO_CDS/engine config new &amp;gt; my_conf_file.toml Edit this file.
Check your configuration file with
$ $PATH_TO_CDS/engine config check my_conf_file.toml Reading configuration file my_new_file.toml Configuration file OK Create your database relations
$ $PATH_TO_CDS/engine database upgrade --db-host &amp;lt;host&amp;gt; --db-port &amp;lt;port&amp;gt; --db-user &amp;lt;user&amp;gt; --db-password &amp;lt;password&amp;gt; --db-name &amp;lt;database&amp;gt; --db-schema=public --migrate-dir $PATH_TO_CDS/engine/sql/api --limit 0 $ PGPASSWORD=&amp;lt;password&amp;gt; psql -h &amp;lt;host&amp;gt; -p &amp;lt;port&amp;gt; -U &amp;lt;user&amp;gt; -d &amp;lt;database&amp;gt; -c &amp;#34;CREATE SCHEMA IF NOT EXISTS cdn AUTHORIZATION &amp;lt;user&amp;gt;;&amp;#34; $ $PATH_TO_CDS/engine database upgrade --db-host &amp;lt;host&amp;gt; --db-port &amp;lt;port&amp;gt; --db-user &amp;lt;user&amp;gt; --db-password &amp;lt;password&amp;gt; --db-name &amp;lt;database&amp;gt; --db-schema=cdn --migrate-dir $PATH_TO_CDS/engine/sql/cdn --limit 0 Download workers binaries</description>
    </item>
    
    <item>
      <title>Database Management</title>
      <link>/hosting/database/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hosting/database/</guid>
      <description>CDS provides all needed tools scripts to perform Schema creation and auto-migration. Those tools are embedded inside the engine binary.
The migration files are available to download on GitHub Releases and the archive is named sql.tar.gz. You have to download it and untar (tar xvzf sql.tar.gz).
Creation On a brand new database run the following command:
$ $PATH_TO_CDS/engine database upgrade --db-host &amp;lt;host&amp;gt; --db-port &amp;lt;port&amp;gt; --db-user &amp;lt;user&amp;gt; --db-password &amp;lt;password&amp;gt; --db-name &amp;lt;database&amp;gt; --db-schema=public --migrate-dir $PATH_TO_CDS/engine/sql/api --limit 0 $ PGPASSWORD=&amp;lt;password&amp;gt; psql -h &amp;lt;host&amp;gt; -p &amp;lt;port&amp;gt; -U &amp;lt;user&amp;gt; -d &amp;lt;database&amp;gt; -c &amp;#34;CREATE SCHEMA IF NOT EXISTS cdn AUTHORIZATION &amp;lt;user&amp;gt;;&amp;#34; $ $PATH_TO_CDS/engine database upgrade --db-host &amp;lt;host&amp;gt; --db-port &amp;lt;port&amp;gt; --db-user &amp;lt;user&amp;gt; --db-password &amp;lt;password&amp;gt; --db-name &amp;lt;database&amp;gt; --db-schema=cdn --migrate-dir $PATH_TO_CDS/engine/sql/cdn --limit 0 Upgrade On an existing database, run the following command on each CDS update:</description>
    </item>
    
    <item>
      <title>Monitoring</title>
      <link>/hosting/monitoring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hosting/monitoring/</guid>
      <description>Status Handler on API https://your.cds.instance/mon/status returns the status of CDS Engine.
If status != OK, something is wrong on your CDS Instance.
Example:
{ &amp;#34;now&amp;#34;: &amp;#34;2018-01-09T20:24:20.481193492Z&amp;#34;, &amp;#34;lines&amp;#34;: [ { &amp;#34;status&amp;#34;: &amp;#34;OK&amp;#34;, &amp;#34;component&amp;#34;: &amp;#34;Version&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;0.25.1-snapshot+1455.cds&amp;#34; }, ... { &amp;#34;status&amp;#34;: &amp;#34;OK&amp;#34;, &amp;#34;component&amp;#34;: &amp;#34;Database&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;20 conns&amp;#34; }, { &amp;#34;status&amp;#34;: &amp;#34;OK&amp;#34;, &amp;#34;component&amp;#34;: &amp;#34;LastUpdate Connected&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;14&amp;#34; }, { &amp;#34;status&amp;#34;: &amp;#34;OK&amp;#34;, &amp;#34;component&amp;#34;: &amp;#34;Worker Model Errors&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;0&amp;#34; } ... } Monitoring with Command Line # display the current job&amp;#39;s queue .</description>
    </item>
    
    <item>
      <title>User Authentication</title>
      <link>/hosting/user_authentication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hosting/user_authentication/</guid>
      <description>CDS can use several authentication backends:
 local LDAP GitHub GitLab  All backends can be enabled at the same time, ie. a user can authenticate both with GitHub, GitLab, Ldap or with local authentication at the same time.
Local Authentication Edit the toml configuration file:
 section [api.auth.local]  enable the signin with enabled = true if you want to disable signup, set signupDisabled = true you can authorize only some domains with the key signupAllowedDomains    [api.</description>
    </item>
    
  </channel>
</rss>
